import * as React from 'react';
declare type Size = {
    height: number;
    width: number;
};
declare type Props = {
    /** Function responsible for rendering children.*/
    children: (Size: Size) => any;
    /** Optional custom CSS class name to attach to root AutoSizer element.  */
    className?: string;
    /** Default height to use for initial render; useful for SSR */
    defaultHeight?: number;
    /** Default width to use for initial render; useful for SSR */
    defaultWidth?: number;
    /** Disable dynamic :height property */
    disableHeight: boolean;
    /** Disable dynamic :width property */
    disableWidth: boolean;
    /** Nonce of the inlined stylesheet for Content Security Policy */
    nonce?: string;
    /** Callback to be invoked on-resize */
    onResize: (Size: Size) => void;
    innerElementType: any;
    /** Optional inline style */
    style?: Object;
};
declare type State = {
    height: number;
    width: number;
};
declare type ResizeHandler = (element?: HTMLElement, onResize?: () => void) => void;
declare type DetectElementResize = {
    addResizeListener: ResizeHandler;
    removeResizeListener: ResizeHandler;
};
export default class AutoSizer extends React.PureComponent<Props, State> {
    static defaultProps: {
        onResize: () => void;
        disableHeight: boolean;
        disableWidth: boolean;
        style: {};
    };
    state: {
        height: number;
        width: number;
    };
    _parentNode?: HTMLElement;
    _autoSizer?: HTMLElement | any;
    _detectElementResize: DetectElementResize;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    _onResize: () => void;
    _setRef: (autoSizer?: HTMLElement | undefined) => void;
}
export {};
